// Below, several function that get called on several occasions when the game remembers the player's shield. These have been edited to also remember the hyper ring.
// TODO: Make all of these call the base function. This is hard for some of these, as they have certain conditions present upon which they backup the shields.

// DEZ2 boss
//# address-hook(0x07f2fe) end(0x07f330)
function void fn07f2fe()
{
	hyper_ring_active_backup = hyper_ring_active
	base.fn07f2fe()
}

// LRZ2 Knuckles Cutscene
//# address-hook(0x063c14) end(0x063c38)
function void fn063c14()
{
	hyper_ring_active_backup = hyper_ring_active
	base.fn063c14()
}

// Exiting HPZ? I think?
//# address-hook(0x090c34) end(0x090ca0)
function void fn090c34()
{
	A1 = 0xffffb000
	D0.u16 = abs(s16[A1 + 0x10] - 0x1640)
	if (D0.u16 >= 8)
	{
		if (D0.u16 >= 0x18)
		{
			objA0.flags38 |= 0x08
		}
		return
	}

	if (objA0.flags38 & 0x08)
	{
		objA0.flags38 &= ~0x08
		A1 = 0xffff0000 + u16[A0 + 0x44]
		if ((u8[A1 + 0x2a] & 0x08) && (objA0.flags38 & 0x20))
		{
			playSound(0xaf)
			level.restart = 1
			checkpoint.number = level.backup.checkpoint | 0x80
			global.zone_act   = level.backup.zone_act
			global.zone_act.apparent = u16[0xffffff9c]
			global.shields_backup_2 = u8[0xffffb02b]
			hyper_ring_active_backup = hyper_ring_active
		}
	}
}

// Entering BS from HPZ
//# address-hook(0x090926) end(0x09095e)
function void fn090926()
{
	base.fn090926()
	// Same check as the base function
	if (objA0.countdown_value < 0)
	{
		hyper_ring_active_backup = hyper_ring_active
	}
}

// Entering BS from big ring? I think?
//# address-hook(0x02d1cc) end(0x02d232)
function void fn02d1cc()
{
	hyper_ring_active_backup = hyper_ring_active
	base.fn02d1cc()
}

// Entering BS as well? No clue...
//# address-hook(0x02d47e) end(0x02d5c0)
function void fn02d47e()
{
	// Same checks as base
	if (u8[A0 + 0x29] != 0)
	{
		if (u8[A0 + 0x29] & 0x01)
		{
			hyper_ring_active_backup = hyper_ring_active
		}
	}
	base.fn02d47e()
}

// Entering gumball?
//# address-hook(0x061050) end(0x0610ac)
function void fn061050()
{
	--u16[0xffff2020]
	A1 = 0x0610ae
	fn0858f8()
	if (D0.u16 == 0)
	{
		D0 = (D0 << 16) + (D0 >> 16)
		if (D0.u16 == 0)
			return

		A1 = 0xffffb04a
		UnloadObjectA1()
		return
	}

	global.zone_act = checkpoint.zone_act
	global.zone_act.apparent = checkpoint.zone_act.apparent
	checkpoint.number = checkpoint.number.backup
	global.stage_type = 0
	level.restart.u8 = 1
	checkpoint.rings = ring_counter
	checkpoint.lives_granted = extra_lives_granted
	global.shields_backup_1 = u8[0xffffb02b] & 0x71
	hyper_ring_active_backup = hyper_ring_active
}

// Exiting glowing spheres
//# address-hook(0x049fe4) end(0x04a078)
function void fn049fe4()
{
	D0.u16 = objA1.position.y.u16
	if (D0.s16 < -0x20)
	{
		if (A1 == 0xffffb000)
		{
			// Reached the upper end
			objA0.animation.timer = 0

		#if STANDALONE
			Game.setAchievementComplete(ACHIEVEMENT_GS_EXIT_TOP)
		#endif
		}
	}
	else
	{
		D0.u16 = D0.u16 - objA0.position.y.u16 + 0x0c
		if (D0.u16 >= 0x18 || debug_mode.state != 0)
			return

		objA1.position.y.u16 = objA0.position.y.u16
		if (u8[A1 + 0x2e] == 0)
		{
			playSound(0x8a)
		}
	}

	u8[A1 + 0x2e] = 0x81
	u8[A1 + 0x2a] |= 0x02
	if (A1 == 0xffffb000)
	{
		objA0.subtype2c = 1
		--objA0.animation.timer
		if (objA0.animation.timer == 0xff)
		{
			global.zone_act = checkpoint.zone_act
			global.zone_act.apparent = checkpoint.zone_act.apparent
			checkpoint.number = checkpoint.number.backup
			global.stage_type = 0
			level.restart.u8 = 1
			checkpoint.rings = ring_counter
			checkpoint.lives_granted = extra_lives_granted
			global.shields_backup_1 = u8[0xffffb02b] & 0x71
			hyper_ring_active_backup = hyper_ring_active
		}
	}
}

// The base game does not actually store the shield in this function, but I couldn't figure out where it does store it for the slot machine game. This works though.
//# address-hook(0x05979a) end(0x05979e)
function void UpdateLevelTiles.BonusSM()
{
	hyper_ring_active_backup = hyper_ring_active
	base.UpdateLevelTiles.BonusSM()
}
