//# address-hook(0x01d57e) end(0x01d5d6)
function void MonitorIntact.Init()
{
	if (objA0.subtype2c == 0x0c)		// Monitor subtype C (Roulette)
	{
		objA0.value39 = 0x0c			// Set this value to C so that the object remembers its original subtype
		objA0.subtype2c = 0x01			// Now set the actual subtype to 1 (rings), so that the animation will play correctly and the monitor isn't just static for a few seconds after spawning.
	}
	else if (objA0.subtype2c == 0x0d)	// Monitor subtype D (Fast roulette), and do the same as earlier.
	{
		objA0.value39 = 0x0d
		objA0.subtype2c = 0x01
	}

	// And now just call the base function
	base.MonitorIntact.Init()
}

global bool roulette_updated

//# address-hook(0x01d5dc) end(0x01d616)
function void MonitorIntact.UpdateDefault()
{
	// The lower the speed value, the faster it changes item. You can edit these if you'd like. Do note that this will affect all roulette monitors accross all levels.
	// If you don't want to affect other mods using this script, you can add add a zone check at the start of this function, and just return if the player isn't in the zone you edited.
	u8 standard_speed = 5
	u8 fast_speed = 1

	// In order to prevent any possible issues from occuring when more than one of these scripts are active, the roulette can only update once every frame.
	// This is done by just setting a global to true, and then resetting it at the end of this monitor's update function.
	if (!roulette_updated)
	{
		if (objA0.value39 == 0x0c)								// Simply update the monitor's subtype depending on the framecounter.
		{
			objA0.subtype2c = (level.framecounter >> standard_speed) % 7 + 2
			roulette_updated = true
		}
		else if (objA0.value39 == 0x0d)							// And update it with a different speed value if this is a fast roulette.
		{
			objA0.subtype2c = (level.framecounter >> fast_speed) % 7 + 2
			roulette_updated = true
		}
	}
	
	base.MonitorIntact.UpdateDefault()							// And then just call the base function for compatibility reasons...
	
	roulette_updated = false
	
	// This is here to fix some weirdness with the flickering animations.
	// The base game does the exact same thing for the classic shield.
	if ((objA0.state == 0x0e) || (objA0.state == 0x0f))
	{
		objA0.state = 0x03
	}
}

//# address-hook(0x01d820) end(0x01d878)
function void ItemEffect.UpdateDefaultInternal()
{
	// Call the base function if this isn't an edited monitor.
	if ((objA0.state == 0x0e) || (objA0.state == 0x0f))
	{
		if ((objA0.render_flags & render_flag.FLIP_Y) == 0)
		{
			if (objA0.velocity.y < 0)
			{
				UpdateMovementStraightSimple()
				objA0.velocity.y += 0x18
				return
			}
		}
		else
		{
			if (objA0.velocity.y >= 0)
			{
				UpdateMovementStraightSimple()
				objA0.velocity.y -= 0x18
				return
			}
		}
		
		objA0.base_state += 2
		u16[A0 + 0x24] = 0x1d

		A1 = 0xffff0000 + u16[A0 + 0x42]
		A2 = (A1 == 0xffffb000) ? 0xfffffecc : 0xfffffece

		// Monitor opening logic.
		if (objA0.state == 0x0e)			// Random Ring Monitor
			applyRandomRings()
		else if (objA0.state == 0x0f)		// Hyper Ring Monitor
			applyHyperRing()
	}
	else
	{
		// Run original base code for the unmodded monitors.
		base.ItemEffect.UpdateDefaultInternal()
	}
}

// This function handles the monitor's icon.
function u64 Monitor.getIconSpriteKey(u8 type)
{
	if (type == 0x0e)						// Random Rings
		return "monitor_icon_random_ring"
	else if (type == 0x0f)						// Spilled Rings
		return "monitor_icon_hyper_ring"
	else
		return base.Monitor.getIconSpriteKey(type)
}

// This is the exact same code as the normal ring monitor, except this makes the given amount random.
function void applyRandomRings()
{
	++u16[A2]

	u8 amount = 50

	u8 random = System.rand() % 100
	if (random <= 20)
		amount = 1
	else if (random <= 50)
		amount = 5
	else if (random <= 70)
		amount = 10
	else if (random <= 90)
		amount = 30
	
	ring_counter = min(ring_counter + amount, 999)
	u16[0xfffffec8] = min(u16[0xfffffec8] + amount, 999)
	hud.dirty.rings |= 0x01

	// Extra life checks.
	if (checkForExtraLifeByRings())
	{
		if (A1 == 0xffffb000)
			ItemEffect.ApplyExtraLifePlayer1()
		else
			fn01d890()
	}
	else
		playMusic(SFX_RING)
}

function void applyHyperRing()
{
	hyper_ring_active = true
	Audio.playAudio("hyper_ring", AudioContext.CONTEXT_SOUND)
}

// Small patch allowing monitor subtypes above 0x20 to be used without issues.
// 3AIR uses the fifth bit (0x10) for elemental monitors that should be classic with a certain setting, but this is only needed for 0x10 to 0x20.
// Thus, to free up a bunch of monitor slots, this code is here, right before the game would normally turn these monitors into classic ones.
// Use this if you need a lot more monitor subtypes.
function u8 Monitor.getRandomizedType(u8 type, bool hiddenMonitor)
{
    if (type >= 0x20)
        return type

    return base.Monitor.getRandomizedType(type, hiddenMonitor)
}